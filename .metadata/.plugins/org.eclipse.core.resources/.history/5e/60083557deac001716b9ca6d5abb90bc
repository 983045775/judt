/**
 * 
 */
package net.File;


import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Logger;

import judp.judpServer;
import judp.judpSocket;



/**
 * 接收文件
 * @author jinyu
 * 
 */
public class RecviceFiles {
private	judpServer server=null;
private Thread recThread=null;
private static  Logger log=Logger.getLogger(RecviceFiles.class.getName());
private String dir="";
private ExecutorService pools = Executors.newCachedThreadPool();
public void setDir(String dir)
{
	this.dir=dir;
}
public boolean start(String host,int port)
{
	File cur=new File(dir);
	if(!cur.exists())
	{
		cur.mkdir();
	}
	server=new judpServer(host, port);
    boolean r=	server.start();
    recThread=new Thread(new Runnable() {
    
    	private	ConcurrentHashMap<String,Long>  fileInfo=new ConcurrentHashMap<String,Long>();
    	private ConcurrentHashMap<String,Long> hashFile=new ConcurrentHashMap<String,Long>();
    	
		@Override
		public void run() {
			
	 while(true)
	    {
		
		judpSocket ss= server.accept();
		pools.execute(new Runnable() {
			String fileName="";
			private long startTime=System.currentTimeMillis();
			private long sumBytes=0;
			 private boolean writeFile(byte[] data)
			 {
		    	   try  
		           {  
		    		   String filePath=dir+"/"+fileName;
		    		   FileOutputStream fs=new FileOutputStream(filePath+".tmp",true);
		               DataOutputStream out=new DataOutputStream(fs);  
		               out.write(data); 
		               out.close();  
		                File  f=new File(filePath+".tmp");
		                long flen=fileInfo.get(fileName);
		                if(flen==f.length())
		                {
		                	//完成
		                	log.info(fileName+"接收完成");
		                	fileInfo.remove(fileName);
		                	hashFile.remove(fileName);
		                	//
		                	 f.renameTo(new   File(filePath));   //改名  
		                	 return true;
		                }
		                log.info(fileName+":"+f.length());
		           } 
		    	   catch (Exception e)  
		           {  
		               e.printStackTrace();  
		           }
				return false;  
		     }
			@Override
			public void run() {
				 byte[] recData=new byte[65535];
				while(true)
				{
				int r= ss.readData(recData);
				if(r==0)
				{
					continue;
				}
				else if(r==-1)
				{
					break;
				}
				//按照Ip
				String key=ss.getRemoteHost()+ss.getRemoteHost();
				if (hashFile.containsKey(key)) {
					//说明是接收数据
					byte[] tmp=new byte[r];
					System.arraycopy(recData, 0, tmp, 0, r);
					sumBytes+=r;
					if(writeFile(tmp))
					{
						ss.close();
					    break;
					}
					//
					long speed=0;
					try
					{
					   speed=sumBytes/((System.currentTimeMillis()-startTime)/1000);
					}
					
					log.info("文件接收速度："+speed/1024/1024);
				}
				else
				{
					//信息
					String info = null;
					try {
						info = new String(recData,0,r,PackagetCharSet.CharSet);
					} catch (UnsupportedEncodingException e) {
					
						e.printStackTrace();
					}
					String[] finfo=info.split(",");
					if(finfo!=null&&finfo.length==2)
					{
						String name="";
						long len=0;
						if(finfo[0].startsWith("File:"))
						{
							name=finfo[0].substring(5);
						}
						if(finfo[1].startsWith("Length:"))
						{
							String flen=finfo[1].substring(7);
							len=Long.valueOf(flen);
						}
						hashFile.put(key, 1L);
						fileInfo.put(name, len);
						fileName=name;
						if(len==0)
						{
							byte[]tmp=name.getBytes();
							ByteBuffer buf=ByteBuffer.allocate(tmp.length+4);
							buf.putInt(tmp.length);
							buf.put(tmp);
							writeFile(buf.array());
						}
						try {
							ss.sendData(("initServer:"+name).getBytes(PackagetCharSet.CharSet));
						} catch (UnsupportedEncodingException e) {
							e.printStackTrace();
						}
						ss.setLargeRead(true);
						log.info("返回信息");
						
					}
				   }
			   }
			}
		});
		
		}
		}
    });
    recThread.setDaemon(true);
    recThread.setName("recfiles");
    recThread.start();
return r;
}
}
