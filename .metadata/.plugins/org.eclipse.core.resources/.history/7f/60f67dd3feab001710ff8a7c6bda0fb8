/**
 * 
 */
package judp;

import java.lang.ref.ReferenceQueue;
import java.lang.ref.WeakReference;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;
import java.util.logging.Logger;

import udt.UDPEndPoint;
import udt.UDTClient;

/**
 * @author jinyu
 * 管理接受端的judpSocket
 */
public class judpSocketManager {
	private static final Logger logger=Logger.getLogger(SocketManager.class.getName());
	private LinkedBlockingQueue<WeakReference<judpSocket>> queue=new LinkedBlockingQueue<WeakReference<judpSocket>>();
	private final ReferenceQueue q = new ReferenceQueue();
	private  UDPEndPoint endPoint=null;
	private static judpSocketManager instance=null;
	  private judpSocketManager (UDPEndPoint point){
		  startThread();
		  startGC();
		  this.endPoint=point;
		 
	  }
	   private void startGC() {
		
		
	}
	private void startThread() {
	Thread clearSession=new Thread(new Runnable() {

		@Override
		public void run() {
			while(true)
			{
				
				 WeakReference<judpSocket> objsocket=queue.take();
				 if(objsocket.get()!=null)
				 {
					 judpSocket socket=objsocket.get();
					 if(socket.getCloseState())
					 {
						 socket.
					 }
				 }
				 
			}
			
		}
		
	});
	clearSession.setDaemon(true);
	clearSession.setName("clearSession");
	clearSession.start();
		
	}
	public static synchronized judpSocketManager getInstance(UDPEndPoint point) {  
		   
	  if (instance == null) {  
		
	     instance = new judpSocketManager(point);    
	     
 }  
	  return instance;  
 }
	public void addSocket(judpSocket socket)
	{
		queue.add(socket);
	}
}
